precision mediump float;

varying vec3 vPosition;
varying vec3 vNormal;
varying vec2 vTexCoord;

uniform sampler2D uTex;

uniform vec4 LightPos;
uniform vec3 LightIntensity;

uniform vec3 Ka;
uniform vec3 Kd;
uniform vec3 Ks;
uniform float Shininess;

void phongModel(vec3 pos, vec3 norm, out vec3 ambAndDiff, out vec3 spec){
    vec3 s = normalize(vec3(LightPos) - pos);
    vec3 v = normalize(-pos.xyz);
    vec3 r = reflect(-s, norm);
    vec3 ambient = LightIntensity * Ka;
    float sDotN = max(dot(s, norm), 0.0);
    vec3 diffuse = LightIntensity * Kd * sDotN;
    spec = vec3(0.0);
    if(sDotN > 0.0)
        spec = LightIntensity * Ks * pow(max(dot(r, v), 0.0), Shininess);
    ambAndDiff = ambient + diffuse;
}

void main(void){
    vec3 ambAndDiff, spec;
    phongModel(vPosition, vNormal, ambAndDiff, spec);

    vec4 texColor = texture2D(uTex, vTexCoord);
    gl_FragColor = vec4(ambAndDiff, 1.0) * texColor + vec4(spec, 1.0);
}
